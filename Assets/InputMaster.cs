//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Mower"",
            ""id"": ""8d1e6b2a-e598-4ca3-a7f2-437933909143"",
            ""actions"": [
                {
                    ""name"": ""MoveLeftAxis"",
                    ""type"": ""Value"",
                    ""id"": ""e04168d3-49cd-4e21-8527-9d3759befed1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveRightAxis"",
                    ""type"": ""Value"",
                    ""id"": ""6a0b2fa9-0257-4716-9201-5ba147179f3f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerRight"",
                    ""type"": ""Value"",
                    ""id"": ""267915c6-e7fd-478d-a9a7-a95a870ae587"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerLeft"",
                    ""type"": ""Value"",
                    ""id"": ""048ac2ae-9285-467b-bb7e-90e7aa3221c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PressX"",
                    ""type"": ""Value"",
                    ""id"": ""ecae7be3-45c0-4451-a50e-867466bf9b8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PressB"",
                    ""type"": ""Value"",
                    ""id"": ""044cf82b-a531-4d53-92e0-c239e041c965"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PressStart"",
                    ""type"": ""Value"",
                    ""id"": ""318d7739-88b3-47f5-8f95-803c8495a13c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PressBack"",
                    ""type"": ""Value"",
                    ""id"": ""5a415145-d251-4630-91ae-29fbc78d23fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Controller"",
                    ""id"": ""27a04485-92ad-4cc8-8846-77b5849bba74"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""43675161-2041-439d-af03-065316b526da"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""MoveLeftAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""982f77f5-7016-48ea-9782-7af5e53d0046"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""MoveLeftAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""89b465da-e117-426d-9223-bca862a65a13"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7449be4c-4ab4-46a7-903d-386908a0befd"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""abac2713-658d-4b4a-b04e-280130cc6243"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0eb2d802-8ba9-4a7a-9779-4ff4f2edddf2"",
                    ""path"": ""<XInputController>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""MoveRightAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8b6b0d6b-c1db-4a30-a72f-bf1fa9303c61"",
                    ""path"": ""<XInputController>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""MoveRightAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4213161d-e233-4ca4-8675-3a7b342e2481"",
                    ""path"": ""<XInputController>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c88a8e08-798b-429e-86c9-c3f982412c2d"",
                    ""path"": ""<XInputController>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""17db41ef-4412-469b-9369-333065a1ccd0"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60d8c577-1ff0-4058-884b-fc1ed3de001d"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f086defc-8656-4c1b-803b-95f56031799c"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""PressX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4cc7867-8c4f-436d-83df-46da0cd781ff"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""PressB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb4cdf4f-8c42-44f6-9e9a-f68d3f16311a"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""PressStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33f7067a-3bc2-4fe0-8070-7837de777c0b"",
                    ""path"": ""<XInputController>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox Control Scheme"",
                    ""action"": ""PressBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox Control Scheme"",
            ""bindingGroup"": ""Xbox Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Mower
        m_Mower = asset.FindActionMap("Mower", throwIfNotFound: true);
        m_Mower_MoveLeftAxis = m_Mower.FindAction("MoveLeftAxis", throwIfNotFound: true);
        m_Mower_MoveRightAxis = m_Mower.FindAction("MoveRightAxis", throwIfNotFound: true);
        m_Mower_TriggerRight = m_Mower.FindAction("TriggerRight", throwIfNotFound: true);
        m_Mower_TriggerLeft = m_Mower.FindAction("TriggerLeft", throwIfNotFound: true);
        m_Mower_PressX = m_Mower.FindAction("PressX", throwIfNotFound: true);
        m_Mower_PressB = m_Mower.FindAction("PressB", throwIfNotFound: true);
        m_Mower_PressStart = m_Mower.FindAction("PressStart", throwIfNotFound: true);
        m_Mower_PressBack = m_Mower.FindAction("PressBack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mower
    private readonly InputActionMap m_Mower;
    private List<IMowerActions> m_MowerActionsCallbackInterfaces = new List<IMowerActions>();
    private readonly InputAction m_Mower_MoveLeftAxis;
    private readonly InputAction m_Mower_MoveRightAxis;
    private readonly InputAction m_Mower_TriggerRight;
    private readonly InputAction m_Mower_TriggerLeft;
    private readonly InputAction m_Mower_PressX;
    private readonly InputAction m_Mower_PressB;
    private readonly InputAction m_Mower_PressStart;
    private readonly InputAction m_Mower_PressBack;
    public struct MowerActions
    {
        private @InputMaster m_Wrapper;
        public MowerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeftAxis => m_Wrapper.m_Mower_MoveLeftAxis;
        public InputAction @MoveRightAxis => m_Wrapper.m_Mower_MoveRightAxis;
        public InputAction @TriggerRight => m_Wrapper.m_Mower_TriggerRight;
        public InputAction @TriggerLeft => m_Wrapper.m_Mower_TriggerLeft;
        public InputAction @PressX => m_Wrapper.m_Mower_PressX;
        public InputAction @PressB => m_Wrapper.m_Mower_PressB;
        public InputAction @PressStart => m_Wrapper.m_Mower_PressStart;
        public InputAction @PressBack => m_Wrapper.m_Mower_PressBack;
        public InputActionMap Get() { return m_Wrapper.m_Mower; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MowerActions set) { return set.Get(); }
        public void AddCallbacks(IMowerActions instance)
        {
            if (instance == null || m_Wrapper.m_MowerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MowerActionsCallbackInterfaces.Add(instance);
            @MoveLeftAxis.started += instance.OnMoveLeftAxis;
            @MoveLeftAxis.performed += instance.OnMoveLeftAxis;
            @MoveLeftAxis.canceled += instance.OnMoveLeftAxis;
            @MoveRightAxis.started += instance.OnMoveRightAxis;
            @MoveRightAxis.performed += instance.OnMoveRightAxis;
            @MoveRightAxis.canceled += instance.OnMoveRightAxis;
            @TriggerRight.started += instance.OnTriggerRight;
            @TriggerRight.performed += instance.OnTriggerRight;
            @TriggerRight.canceled += instance.OnTriggerRight;
            @TriggerLeft.started += instance.OnTriggerLeft;
            @TriggerLeft.performed += instance.OnTriggerLeft;
            @TriggerLeft.canceled += instance.OnTriggerLeft;
            @PressX.started += instance.OnPressX;
            @PressX.performed += instance.OnPressX;
            @PressX.canceled += instance.OnPressX;
            @PressB.started += instance.OnPressB;
            @PressB.performed += instance.OnPressB;
            @PressB.canceled += instance.OnPressB;
            @PressStart.started += instance.OnPressStart;
            @PressStart.performed += instance.OnPressStart;
            @PressStart.canceled += instance.OnPressStart;
            @PressBack.started += instance.OnPressBack;
            @PressBack.performed += instance.OnPressBack;
            @PressBack.canceled += instance.OnPressBack;
        }

        private void UnregisterCallbacks(IMowerActions instance)
        {
            @MoveLeftAxis.started -= instance.OnMoveLeftAxis;
            @MoveLeftAxis.performed -= instance.OnMoveLeftAxis;
            @MoveLeftAxis.canceled -= instance.OnMoveLeftAxis;
            @MoveRightAxis.started -= instance.OnMoveRightAxis;
            @MoveRightAxis.performed -= instance.OnMoveRightAxis;
            @MoveRightAxis.canceled -= instance.OnMoveRightAxis;
            @TriggerRight.started -= instance.OnTriggerRight;
            @TriggerRight.performed -= instance.OnTriggerRight;
            @TriggerRight.canceled -= instance.OnTriggerRight;
            @TriggerLeft.started -= instance.OnTriggerLeft;
            @TriggerLeft.performed -= instance.OnTriggerLeft;
            @TriggerLeft.canceled -= instance.OnTriggerLeft;
            @PressX.started -= instance.OnPressX;
            @PressX.performed -= instance.OnPressX;
            @PressX.canceled -= instance.OnPressX;
            @PressB.started -= instance.OnPressB;
            @PressB.performed -= instance.OnPressB;
            @PressB.canceled -= instance.OnPressB;
            @PressStart.started -= instance.OnPressStart;
            @PressStart.performed -= instance.OnPressStart;
            @PressStart.canceled -= instance.OnPressStart;
            @PressBack.started -= instance.OnPressBack;
            @PressBack.performed -= instance.OnPressBack;
            @PressBack.canceled -= instance.OnPressBack;
        }

        public void RemoveCallbacks(IMowerActions instance)
        {
            if (m_Wrapper.m_MowerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMowerActions instance)
        {
            foreach (var item in m_Wrapper.m_MowerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MowerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MowerActions @Mower => new MowerActions(this);
    private int m_XboxControlSchemeSchemeIndex = -1;
    public InputControlScheme XboxControlSchemeScheme
    {
        get
        {
            if (m_XboxControlSchemeSchemeIndex == -1) m_XboxControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Xbox Control Scheme");
            return asset.controlSchemes[m_XboxControlSchemeSchemeIndex];
        }
    }
    public interface IMowerActions
    {
        void OnMoveLeftAxis(InputAction.CallbackContext context);
        void OnMoveRightAxis(InputAction.CallbackContext context);
        void OnTriggerRight(InputAction.CallbackContext context);
        void OnTriggerLeft(InputAction.CallbackContext context);
        void OnPressX(InputAction.CallbackContext context);
        void OnPressB(InputAction.CallbackContext context);
        void OnPressStart(InputAction.CallbackContext context);
        void OnPressBack(InputAction.CallbackContext context);
    }
}
